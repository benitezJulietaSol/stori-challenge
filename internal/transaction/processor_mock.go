// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	reflect "reflect"
	model "stori-challenge/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockemailService is a mock of emailService interface.
type MockemailService struct {
	ctrl     *gomock.Controller
	recorder *MockemailServiceMockRecorder
}

// MockemailServiceMockRecorder is the mock recorder for MockemailService.
type MockemailServiceMockRecorder struct {
	mock *MockemailService
}

// NewMockemailService creates a new mock instance.
func NewMockemailService(ctrl *gomock.Controller) *MockemailService {
	mock := &MockemailService{ctrl: ctrl}
	mock.recorder = &MockemailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemailService) EXPECT() *MockemailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockemailService) SendEmail(arg0 context.Context, arg1 model.EmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockemailServiceMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockemailService)(nil).SendEmail), arg0, arg1)
}

// Mocks3Service is a mock of s3Service interface.
type Mocks3Service struct {
	ctrl     *gomock.Controller
	recorder *Mocks3ServiceMockRecorder
}

// Mocks3ServiceMockRecorder is the mock recorder for Mocks3Service.
type Mocks3ServiceMockRecorder struct {
	mock *Mocks3Service
}

// NewMocks3Service creates a new mock instance.
func NewMocks3Service(ctrl *gomock.Controller) *Mocks3Service {
	mock := &Mocks3Service{ctrl: ctrl}
	mock.recorder = &Mocks3ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks3Service) EXPECT() *Mocks3ServiceMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *Mocks3Service) ReadFile(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *Mocks3ServiceMockRecorder) ReadFile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*Mocks3Service)(nil).ReadFile), ctx)
}

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// InsertTransactions mocks base method.
func (m *Mockrepository) InsertTransactions(arg0 context.Context, arg1 []model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactions indicates an expected call of InsertTransactions.
func (mr *MockrepositoryMockRecorder) InsertTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*Mockrepository)(nil).InsertTransactions), arg0, arg1)
}
